{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadsahilshaikh/Downloads/cloudcomputingproject/frontend/converterapp/src/CryptoList.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Cryptolist = () => {\n  const cryptoCurrencies = [{\n    value: 'BTC',\n    label: 'Bitcoin'\n  }, {\n    value: 'ETH',\n    label: 'Ethereum'\n  }, {\n    value: 'DOGE',\n    label: 'Dogecoin'\n  }, {\n    value: 'XRP',\n    label: 'Ripple'\n  }, {\n    value: 'LTC',\n    label: 'Litecoin'\n  }, {\n    value: 'BCH',\n    label: 'Bitcoin Cash'\n  }, {\n    value: 'ADA',\n    label: 'Cardano'\n  }, {\n    value: 'DOT',\n    label: 'Polkadot'\n  }, {\n    value: 'XLM',\n    label: 'Stellar'\n  }\n  // Add more crypto currencies as needed\n  ];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cryptoCurrencies.map(crypto => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: crypto.value,\n      children: crypto.label\n    }, crypto.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_c = Cryptolist;\nexport default Cryptolist;\nvar _c;\n$RefreshReg$(_c, \"Cryptolist\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Cryptolist","cryptoCurrencies","value","label","children","map","crypto","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mohammadsahilshaikh/Downloads/cloudcomputingproject/frontend/converterapp/src/CryptoList.js"],"sourcesContent":["import React from 'react';\n\nconst Cryptolist = () => {\n  const cryptoCurrencies = [\n    { value: 'BTC', label: 'Bitcoin' },\n    { value: 'ETH', label: 'Ethereum' },\n    { value: 'DOGE', label: 'Dogecoin' },\n    { value: 'XRP', label: 'Ripple' },\n    { value: 'LTC', label: 'Litecoin' },\n    { value: 'BCH', label: 'Bitcoin Cash' },\n    { value: 'ADA', label: 'Cardano' },\n    { value: 'DOT', label: 'Polkadot' },\n    { value: 'XLM', label: 'Stellar' },\n    // Add more crypto currencies as needed\n  ];\n\n  return (\n    <>\n      {cryptoCurrencies.map((crypto) => (\n        <option key={crypto.value} value={crypto.value}>\n          {crypto.label}\n        </option>\n      ))}\n    </>\n  );\n};\n\nexport default Cryptolist;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAMC,gBAAgB,GAAG,CACvB;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAU,CAAC,EAClC;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAW,CAAC,EACnC;IAAED,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAW,CAAC,EACpC;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAS,CAAC,EACjC;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAW,CAAC,EACnC;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAe,CAAC,EACvC;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAU,CAAC,EAClC;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAW,CAAC,EACnC;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAU;EACjC;EAAA,CACD;;EAED,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,EACGH,gBAAgB,CAACI,GAAG,CAAEC,MAAM,iBAC3BT,OAAA;MAA2BK,KAAK,EAAEI,MAAM,CAACJ,KAAM;MAAAE,QAAA,EAC5CE,MAAM,CAACH;IAAK,GADFG,MAAM,CAACJ,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEjB,CACT;EAAC,gBACF,CAAC;AAEP,CAAC;AAACC,EAAA,GAvBIX,UAAU;AAyBhB,eAAeA,UAAU;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}